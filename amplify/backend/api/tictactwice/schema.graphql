type Player
  @model
  @key(fields: ["username"])
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, ownerField: "username", operations: [update] }
      {
        allow: private
        provider: iam
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  cognitoID: String!
  username: String!
  name: String!
  email: AWSEmail!
  games: [PlayerGame] @connection(keyName: "byPlayer", fields: ["username"])
}

type PlayerGame
  @model(queries: null)
  @key(name: "byGame", fields: ["gameID"])
  @key(name: "byPlayer", fields: ["playerUsername", "createdAt"])
  @auth(
    rules: [
      {
        allow: private
        provider: iam
        operations: [read, create, update, delete]
      }
      { allow: owner, ownerField: "owners", operations: [read] }
    ]
  ) {
  id: ID!
  createdAt: String!
  gameID: ID!
  playerUsername: String!
  owners: [String!]!
  game: Game! @connection(fields: ["gameID"])
  player: Player! @connection(fields: ["playerUsername"])
}

type Game
  @model
  @auth(
    rules: [
      {
        allow: private
        provider: iam
        operations: [read, create, update, delete]
      }
      { allow: owner, ownerField: "owners", operations: [read] }
    ]
  ) {
  id: ID!
  gameState: GameState!
  owners: [String!]!
  initiator: String!
  turn: String!
  boardState: [Symbol]!
  winner: String
  players: [PlayerGame] @connection(keyName: "byGame", fields: ["id"])
}

enum GameState {
  REQUESTED
  DECLINED
  ACTIVE
  FINISHED
  CANCELLED
}

enum Symbol {
  X
  O
}
